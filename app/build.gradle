apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'

def PLUGIN_VERSION = "0.9.0"
def ATAK_VERSION = "4.1.0"

android {
    compileSdkVersion 28
    buildToolsVersion "30.0.1"

    dexOptions {
        jumboMode = true
    }

    defaultConfig {
        minSdkVersion 21
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86"
        }
    }

    flavorDimensions "application"
    productFlavors {
        civ {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CIV"]
        }
    }

    sourceSets {
        main {
            setProperty("archivesBaseName", "ATAK-Plugin-" + rootProject.name + "-" + PLUGIN_VERSION + "-" + getVersionName() + "-" + ATAK_VERSION)
            defaultConfig.versionCode = getVersionCode()
            defaultConfig.versionName = PLUGIN_VERSION + " (" + getVersionName() + ") - [" + ATAK_VERSION + "]"

            proto {
                srcDir 'src/main/protobuf'
                srcDir 'src/main/protocolbuffers'
            }
        }
        test {
            proto {
                srcDir 'src/test/protocolbuffers'
            }
            java.srcDirs 'src/test/java'
        }
        // Move the tests to tests/java, tests/res, etc...
        //instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/androidx.localbroadcastmanager_localbroadcastmanager.version'
    }

    lintOptions {
        checkReleaseBuilds true
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    signingConfigs {
        debug {
            storeFile file("/path/to/your/keystore")
            storePassword ""
            keyAlias ""
            keyPassword ""
        }

        release {
            storeFile file("/path/to/your/keystore")
            storePassword ""
            keyAlias ""
            keyPassword ""
        }
    }

    buildTypes {
        debug {
            debuggable true
        }

        release {
            def f = new File("$project.projectDir/../../AndroidTacticalAssaultKit-CIV/atak/ATAK/app/build/outputs/mapping/release/mapping.txt")
            if (f.exists()) {
                System.setProperty("atak.proguard.mapping", "../../AndroidTacticalAssaultKit-CIV/atak/ATAK/app/build/outputs/mapping/release/mapping.txt")
            } else {
                println("WARNING: no mapping file exists, obfuscating just the plugin to work with the development core")
                file("$project.projectDir/build").mkdir()
                file("$project.projectDir/build/blank-mapping.txt").text = ""
                System.setProperty("atak.proguard.mapping", "./build/blank-mapping.txt")
            }

            minifyEnabled true
            proguardFile 'proguard-gradle.txt'
            signingConfig signingConfigs.release
        }
    }
}

// Attempt to get a suitable version name for the plugin based on
// either a git or svn repository
def getVersionName() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short=8', 'HEAD'
            standardOutput = stdout
        }
        def describe = stdout.toString().trim()
        println("versionName[git]: $describe")
        return describe
    } catch (Exception ignored) {
        println("error occured, using revision of 1")
        return 1
    }
}


// Attempt to get a suitable version code for the plugin based on
// either a git or svn repository
def getVersionCode() {
    try {
        new ByteArrayOutputStream().withStream { os ->
            exec {
                executable = 'git'
                args = ['show', '-s', '--format=%ct']
                standardOutput = os
                ignoreExitValue = true
            }

            def outputAsString = os.toString()
            ext.revision = "$outputAsString".toInteger()

            println("version[git]: $revision")
        }
    } catch (Exception ignored) {
        println("error occured, using revision of 1")
        ext.revision = 1
    }

    return revision
}

sourceSets {
    main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}

dependencies {
    implementation "androidx.constraintlayout:constraintlayout:2.0.2"
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation 'com.google.protobuf:protobuf-lite:3.0.1'

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:1.0-M1-1.4.0-rc"

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'me.dm7.barcodescanner:zxing:1.9.13'
    implementation 'eo.view:batterymeter:2.0.0'

    compileOnly fileTree(dir: '../../AndroidTacticalAssaultKit-CIV/atak/ATAK/app/build/libs/4.1.0.CIV/main.jar', include: '*.jar')

    implementation 'com.paulmandal.atak:libcotshrink:0.1.0'

    testImplementation 'junit:junit:4.13'
}

task updateSubmodules(type: Exec) {
    executable "bash"
    args "-c", """
            echo "Updating submodules" &&
            git submodule update --init --recursive
        """
}

preBuild.dependsOn updateSubmodules

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.7.0'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                javalite {}
            }
        }
    }
}
